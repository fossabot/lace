#!/usr/bin/env ruby
std_trap = trap("INT") { exit! 130 } # no backtrace thanks
require 'pathname'

LIB_PATH = Pathname.new(__FILE__).realpath.dirname.parent.join("lib").to_s
$:.unshift(LIB_PATH)

require "lace/utils"
require "lace/exceptions"
require "lace/version"

require "extend/ARGV"
require "extend/pathname"

packages_folder = Pathname.new(ENV["HOME"]).join(".cassias")

if ENV["LACE_FOLDER"]
  packages_folder = Pathname.new(ENV["LACE_FOLDER"])
end
LACE_PKGS_FOLDER = packages_folder

module Lace extend self
  attr_accessor :failed
  alias_method :failed?, :failed
end

ARGV.extend(LaceArgvExtension)

if ARGV.debug?
  require "debugger"
end

def require? path
  require path.to_s.chomp
rescue LoadError => e
  # HACK :( because we should raise on syntax errors but
  # not if the file doesn't exist. TODO make robust!
  raise unless e.to_s.include? path
end

case ARGV.first when '-h', '--help', '--usage', '-?', 'help', nil
  require 'cmd/help'
  puts Lace.help_s
  exit ARGV.first ? 0 : 1
when '--version'
  puts Lace::VERSION
  exit 0
when '-v'
  puts "lace #{Lace::VERSION}"
  # Shift the -v to the end of the parameter list
  ARGV << ARGV.shift
  # If no other arguments, just quit here.
  exit 0 if ARGV.length == 1
end


begin
  trap("INT", std_trap) # restore default CTRL-C handler
  if Process.uid.zero?
    raise "Refusing to run as sudo"
  end

  aliases = {'ls' => 'list',
             'rm' => 'remove'}

  cmd = ARGV.shift
  cmd = aliases[cmd] if aliases[cmd]


  if require? "cmd/" + cmd
    Lace.send cmd.to_s.gsub('-', '_').downcase
  else
    onoe "Unknown command: #{cmd}"
    exit 1
  end

rescue ResourceNotSpecified
  abort "This command requires a resource argument"
rescue UsageError
  onoe "Invalid usage"
  abort ARGV.usage
rescue SystemExit
  puts "Kernel.exit" if ARGV.verbose?
  raise
rescue Interrupt => e
  puts # seemingly a newline is typical
  exit 130
rescue RuntimeError, SystemCallError => e
  raise if e.message.empty?
  onoe e
  puts e.backtrace if false
  exit 1
rescue Exception => e
  onoe e
  puts "#{Tty.white}Please report this bug:"
  puts e.backtrace
  exit 1
else
  exit 1 if Lace.failed?
end
